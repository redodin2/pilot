@using MainApp.Shared
@using MainApp.Shared.FP
@inject IJSRuntime JSRuntime

<div class="d-flex align-items-center">
    <div class="@(Node.IsFirst ? "" : "node-input-wrapper")">
        <input id="@Node.Id"
               size="@($"{Math.Max(1, Node.Title.Length * 0.66)}rem")"
               placeholder="@Node.Title"
               class="node-input"
               @ref="nodeRef"
               @onkeydown="@OnKeyDown" @onkeydown:preventDefault="@shouldPrevent"
               @bind="editedTitle" @bind:event="oninput" />
    </div>
    <div class="d-flex flex-column-reverse">
        @foreach (var child in Node.SubNodes.Reverse())
        {
            <NodeView @key="@child.Id" Node="@child" Callback="@Callback" />
        }
    </div>
</div>

@code {
    private bool shouldPrevent = false;
    private string? editedTitle;
    private ElementReference nodeRef;

    [Parameter] public Node Node { get; set; } = Node.Root("");
    [Parameter] public EventCallback<Node> Callback { get; set; }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender) await nodeRef.FocusAsync(JSRuntime);
    }

    private async Task OnKeyDown(KeyboardEventArgs args)
    {
        Node? newNode;
        (newNode, shouldPrevent) = args.Code switch
        {
            "Tab" when !IsModified(args) => (Node.AddSubNode(), true),
            "Enter" => (Node.AddNextNeighbour(), false),
            _ => (default, false)
        };

        newNode.IfSome(_ =>
        {
            editedTitle.IfSome(Node.Rename);
            editedTitle = default;
        });

        await Callback.InvokeAsync(Node);
    }

    private bool IsModified(KeyboardEventArgs args) => args.Repeat || args.CtrlKey || args.ShiftKey || args.AltKey || args.MetaKey;
}
